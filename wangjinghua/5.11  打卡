class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        //我的思路，拿两边值比较，l1小于等于l2的值,l1指向下一个。可以使用递归
        //纠正:题解中没使用l3，但我觉得使用了更清晰。哈哈哈不用l3，内存占用反而高了
        ListNode l3=null;
        if(l1==null){
            return l3=l2;
        }
        if(l2==null){
            return l3=l1;
        }
        if(l1.val<=l2.val){
            l1.next=mergeTwoLists(l1.next,l2);
            return l3=l1;
        }else{
            l2.next=mergeTwoLists(l1,l2.next);
            return l3=l2;
        }

    }
}

class Solution {
    public ListNode sortList(ListNode head) {
        //我的思路：借用递归。
        //纠正：时间复杂度没背熟。看过题解才知道要用归并排序
        if (head == null || head.next == null)
            return head;
        ListNode fast = head.next, slow = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;//又见快慢指针
        }
        ListNode tmp = slow.next;
        slow.next = null;
        ListNode left = sortList(head);
        ListNode right = sortList(tmp);
        ListNode h = new ListNode(0);//归并排序需要一个额外空间
        ListNode res = h;
        while (left != null && right != null) {
            if (left.val < right.val) {
                h.next = left;
                left = left.next;
            } else {
                h.next = right;
                right = right.next;
            }
            h = h.next;
        }
        h.next = left != null ? left : right;
        return res.next;
    }
}
